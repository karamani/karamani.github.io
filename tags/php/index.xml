<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on karamani</title>
    <link>http://karamani.ru/tags/php/</link>
    <description>Recent content in Php on karamani</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Tue, 15 Dec 2015 01:44:21 +0300</lastBuildDate>
    <atom:link href="http://karamani.ru/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ссылки внутри цикла foreach в Php</title>
      <link>http://karamani.ru/post/php-foreach/</link>
      <pubDate>Tue, 15 Dec 2015 01:44:21 +0300</pubDate>
      
      <guid>http://karamani.ru/post/php-foreach/</guid>
      <description>&lt;p&gt;Тот случай, когда php работает согласно спецификации, но вопреки здравому смыслу.&lt;/p&gt;

&lt;p&gt;Ниже приведён пример отлично работающего кода:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$list = array(1, 2, 3);
foreach ($list as &amp;amp;$item) {
    $item++;
}
print_r($list);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Запускаем, получаем логичный вывод:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Array
(
    [0] =&amp;gt; 2
    [1] =&amp;gt; 3
    [2] =&amp;gt; 4
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;А теперь лёгким движением руки этот код превращается&amp;hellip; превращается&amp;hellip; в конструкцию со странным неочевидным функционалом.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$list = array(1, 2, 3);
foreach ($list as &amp;amp;$item) {
    $item++;
}
print_r($list);

foreach ($list as $item) {
    ;
}
print_r($list);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Мы всего лишь организовали второй цикл foreach по одному и тому массиву. И в этот раз &lt;code&gt;print_r&lt;/code&gt; выдал совсем иные результаты.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Array
(
    [0] =&amp;gt; 2
    [1] =&amp;gt; 3
    [2] =&amp;gt; 3
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Что же произошло? Собственно, ничего такого, чтобы мы сами не просили сделать PHP. В первом цикле мы объявили ссылку &amp;amp;$item, которая после завершения работы цикла указывает на элемент массива $list[2]. Далее мы пробегаемся ещё раз по массиву, на каждом шаге присваивая переменной $item очередное значение. Т.к. в PHP область видимости переменных не ограничивается блоком составного оператора, то переменная $item во втором цикле - это та же самая переменная из первого цикла. Поэтому, одновременно с установкой значения переменной $item, это же значение присваивается и элементу $list[2].&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Шаг 0: $item = $list[2] = $list[0] = 2&lt;/li&gt;
&lt;li&gt;Шаг 1: $item = $list[2] = $list[1] = 3&lt;/li&gt;
&lt;li&gt;Шаг 2: $item = $list[2] = $list[2] = 3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Никаких ошибок нет, но получить-то мы хотели несколько другой результат. Есть несколько вариантов, чтобы обезопасить себя от таких неожиданностей. Первый вариант - никогда не забываем принудительно чистить переменные. Вот этот код всегда работает так, как задумано.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$list = array(1, 2, 3);
foreach ($list as &amp;amp;$item) {
    $item++;
}
print_r($list);

unset($item); // !!!

foreach ($list as $item) {
    ;
}
print_r($list);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Второй вариант - для изменения элементов массива не используем ссылки, используем конструкцию $key =&amp;gt; $value. С ней также нет никаких проблем.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$list = array(1, 2, 3);
foreach ($list as $key =&amp;gt; $item) {
    $list[$key]++;
}
print_r($list);

foreach ($list as $key =&amp;gt; $item) {
    ;
}
print_r($list);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ну и самый правильный вариант, при котором мы не только избегаем описанной проблемы, но и многих других - максимально сокращаем область видимости переменных, выделяя логические части кода в отдельные функции. Этот вариант неплохо бы совмещать с одним из первых двух.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$list = array(1, 2, 3);

$incrementList = function ($list) {
    foreach ($list as $key =&amp;gt; $item) {
        $list[$key]++;
    }
    return $list;
};
$list = $incrementList($list);
print_r($list);

$doList = function ($list) {
    foreach ($list as $key =&amp;gt; $item) {
        ;
    }
    return $list;
};
$list = $doList($list);
print_r($list);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Здесь $item первого цикла и $item второго цикла - разные переменные.&lt;/p&gt;

&lt;p&gt;Пишите на  PHP и прибудет с вами сила!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Curl, многомерные массивы и передача файлов</title>
      <link>http://karamani.ru/post/php-curl-files/</link>
      <pubDate>Mon, 14 Dec 2015 02:04:16 +0300</pubDate>
      
      <guid>http://karamani.ru/post/php-curl-files/</guid>
      <description>&lt;p&gt;Задача: из кода на PHP передать веб-службе файл с помощью curl.&lt;/p&gt;

&lt;p&gt;Решение стандартное и достаточно простое, но, как обычно, при программировании на PHP есть нюансы.&lt;/p&gt;

&lt;p&gt;Инициализируем библиотеку curl, формируем данные для POST-запроса, одним из параметров устанавливаем путь к передаваемому файлу, который обязательно начинаем со значка &amp;ldquo;собаки&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$requestVars = array(
    &#39;id&#39; =&amp;gt; 1234,
    &#39;name&#39; =&amp;gt; &#39;log&#39;,
    &#39;logfile&#39; =&amp;gt; &#39;@/tmp/test.log&#39;);

$ch = curl_init(); 

curl_setopt($ch, CURLOPT_URL, &#39;test.web.service.net&#39;);
curl_setopt($ch, CURLOPT_POST, 1);

curl_setopt($ch, CURLOPT_POSTFIELDS, $requestVars);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);

$res = curl_exec($ch);

curl_close($ch);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Смотрим на стороне веб-службы переменные $_POST и $_FILES.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$_POST: Array (
    [id] =&amp;gt; 1234
    [name] =&amp;gt; log
)

$_FILES: Array (
    [logfile] =&amp;gt; Array (
        [name] =&amp;gt; test.log
        [type] =&amp;gt; application/octet-stream
        [tmp_name] =&amp;gt; /tmp/phpfdWZF6
        [error] =&amp;gt; 0
        [size] =&amp;gt; 11
    )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Всё прошло отлично. Curl самостоятельно принял решение об использовании при передаче запроса алгоритма multipart/form-data и передал файл веб-службе.
На её стороне файл сохранён с именем /tmp/phpfdWZF6.&lt;/p&gt;

&lt;p&gt;Теперь попробуем изменить параметры запроса, добавив туда вложенные массивы.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$requestVars = array(
    &#39;id&#39; =&amp;gt; array(1, 2, 3, 4),
    &#39;name&#39; =&amp;gt; &#39;log&#39;,
    &#39;logfile&#39; =&amp;gt; &#39;@/tmp/test.log&#39;); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Файл веб-служба загрузила, а вот в переменной $_POST теперь некорректные данные.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$_POST: Array (
    [id] =&amp;gt; Array
    [name] =&amp;gt; log
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Проблема в том, что библиотека curl не умеет обрабатывать вложенные массивы, установленные в CURLOPT_POSTFIELDS.
Она работает только с одноуровневыми массивами или строкам. Поэтому самое первое и очевидное решение - превратить массив в строку с помощью http_build_query.
Пробуем.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($requestVars, &#39;&#39;, &#39;&amp;amp;&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Параметры в $_POST передались как нужно, но теперь вообще не передался файл.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$_POST: Array (
    [id] =&amp;gt; Array (
        [0] =&amp;gt; 1
        [1] =&amp;gt; 2
        [2] =&amp;gt; 3
        [3] =&amp;gt; 4
    )
    [name] =&amp;gt; log
    [logfile] =&amp;gt; @/tmp/test.log
)

$_FILES: Array ( )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Т.к. параметры запроса были переданы строкой, то библиотека curl проявила интеллект и начала использовать алгоритм передачи данных application/x-www-form-urlencoded,
который не имеет даже теоретической возможности передачи файла. Продолжаем борьбу. Устанавливаем принудительно в заголовках запроса нужный нам тип контента.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$headers[] = &amp;quot;Content-type: multipart/form-data&amp;quot;;
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;После этого у нас вообще перестаёт работать отправка запроса. Ни параметры запроса, ни файл веб-служба не получает.
А всё потому, что начиная с PHP версии 5.2.0 при передаче файлов с префиксом &amp;ldquo;@&amp;rdquo; значение в CURLOPT_POSTFIELDS обязательно должно быть массивом.
С одной стороны, чтобы передать многоуровневый массив, нам нужна строка. С другой стороны, для передачи файла нужен массив.&lt;/p&gt;

&lt;p&gt;Решение, как обычно, посередине. Строим одноуровневый массив с такими ключами, какими они были бы при формировании строки.
Т.е. приводим наши параметры к такому виду.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$requestVars = array(
    &#39;id[0]&#39; =&amp;gt; 1, 
    &#39;id[1]&#39; =&amp;gt; 2, 
    &#39;id[3]&#39; =&amp;gt; 3, 
    &#39;id[4]&#39; =&amp;gt; 4,
    &#39;name&#39; =&amp;gt; &#39;log&#39;,
    &#39;logfile&#39; =&amp;gt; &#39;@/tmp/test.log&#39;); 

curl_setopt($ch, CURLOPT_POSTFIELDS, $requestVars);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;И вот теперь мы, наконец-то, получили то, что хотели.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$_POST: Array (
    [id] =&amp;gt; Array (
        [0] =&amp;gt; 1
        [1] =&amp;gt; 2
        [3] =&amp;gt; 3
        [4] =&amp;gt; 4
    )
    [name] =&amp;gt; log
)

$_FILES: Array (
    [logfile] =&amp;gt; Array (
        [name] =&amp;gt; test.log
        [type] =&amp;gt; application/octet-stream
        [tmp_name] =&amp;gt; /tmp/phpfdWZF6
        [error] =&amp;gt; 0
        [size] =&amp;gt; 11
    )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Осталось написать универсальное решение, которое бы преобразовывало любые многоуровневые массивы в одноуровневые.
Тут на помощь приходит простенькая рекурсия.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function convertToStringArray(
        $inputKey, $inputArray, &amp;amp;$resultArray) {

    foreach ($inputArray as $key =&amp;gt; $value) {
        $tmpKey = (bool)$inputKey ? $inputKey.&amp;quot;[$key]&amp;quot; : $key;
        if (is_array($value)) {
            convertToStringArray($tmpKey, $value, $resultArray);
        } else {
            $resultArray[$tmpKey] = $value;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Тестируем последний раз.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$requestVars = array(
    &#39;id&#39; =&amp;gt; array(1, 2, 3, 4),
    &#39;name&#39; =&amp;gt; &#39;log&#39;,
    &#39;logfile&#39; =&amp;gt; &#39;@/tmp/test.log&#39;);

$resultArray = array();
convertToStringArray(&#39;&#39;, $requestVars, $resultArray);
$requestVars = $resultArray;

$ch = curl_init(); 

curl_setopt($ch, CURLOPT_URL, &#39;test.web.service.net&#39;);
curl_setopt($ch, CURLOPT_POST, 1);

curl_setopt($ch, CURLOPT_POSTFIELDS, $requestVars);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);

$res = curl_exec($ch);

curl_close($ch);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Убеждаемся, что всё работает, и отправляемся на поиски новых открытий в прекрасном и удивительном мире программирования на PHP.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>