<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>karamani</title>
    <link>http://karamani.ru/</link>
    <description>Recent content on karamani</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Tue, 12 Jan 2016 22:56:38 +0300</lastBuildDate>
    <atom:link href="http://karamani.ru/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Обязательные конструкторы в PHP</title>
      <link>http://karamani.ru/post/php-constructors/</link>
      <pubDate>Tue, 12 Jan 2016 22:56:38 +0300</pubDate>
      
      <guid>http://karamani.ru/post/php-constructors/</guid>
      <description>&lt;p&gt;Перепечатка из моего старого блога. Проверялось на PHP 5.3. Как обстоят дела в более свежих версиях, ещё не проверял.&lt;/p&gt;

&lt;p&gt;Объектно-ориентированное программирования в PHP такое&amp;hellip; объектно-ориентированное&amp;hellip;&lt;/p&gt;

&lt;p&gt;Пусть есть базовый класс BaseClass. Создаём его потомка - класс ChildClass. Создаём конструктор и &amp;ldquo;на автомате&amp;rdquo; вызываем конструктор базового класса.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class BaseClass { }

class ChildClass extends BaseClass {
    public function __construct() {
        parent::__construct();
        // какой-то код
    }
}

$obj = new ChildClass();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если в базовом классе конструктор не объявлен явно, то мы рискуем получить сюрприз в виде &amp;ldquo;PHP Fatal error:  Cannot call constructor&amp;rdquo;.
Чтобы избавиться от ошибки, либо не вызываем конструктор предка, что в большинстве случаев плохая практика, либо пишем пустой конструктор в базовом классе.&lt;/p&gt;

&lt;p&gt;В коде ниже ошибка уже не появляется.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;class BaseClass {
    public function __construct() { }
}

class ChildClass extends BaseClass {
    public function __construct() {
        parent::__construct();
        // какой-то код
    }
}

$obj = new ChildClass();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Аналогичная ситуация с деструктором. Не хочешь проблем - пиши пустой метод. Мелкое неудобство, но не позволяет полностью скрыть реализацию базового класса.
Всегда нужно смотреть в код и проверять наличие конструкторов/деструкторов. Отдельной интриги добавляют приватные конструкторы и деструкторы.&lt;/p&gt;

&lt;p&gt;Причина такого поведения понятна. То, что в PHP называется конструктором, на самом деле - обычная функция инициализации.
Но при этом абсолютно непонятно, что делать, чтобы не допускать связанных с этим ошибок.
Остаётся быть внимательным, смириться и пользоваться тем, что есть.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Используем VIM как редактор golang</title>
      <link>http://karamani.ru/post/vim-golang-ide/</link>
      <pubDate>Mon, 28 Dec 2015 21:27:28 +0300</pubDate>
      
      <guid>http://karamani.ru/post/vim-golang-ide/</guid>
      <description>

&lt;p&gt;Краткая инструкция по настройке VIM в качестве редактора golang-файлов.
Не претендует на полноту изложения, но может стать отправной точкой на пути к среде разработки своей мечты.
В одну статью явно не вмещается, поэтому не буду и стараться. Сначала рассмотрим установку основных плагинов.
потом добавим удобства в работе дополнительными плагинами и настройками, затем остановимся на каких-то интересных
моментах подробнее.&lt;/p&gt;

&lt;h2 id=&#34;устанавливаем-vim:140cbd5ccce65f598015d386e32d8c4c&#34;&gt;Устанавливаем VIM&lt;/h2&gt;

&lt;p&gt;В интернете можно найти массу инструкций по установке &lt;a href=&#34;http://www.vim.org/&#34;&gt;VIM&lt;/a&gt; на разные операционные системы.
Нет смысла повторяться. Для меня вся установка уместилась в одну консольную команду.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install vim vim-gtk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если вы пользователь Ubuntu 15.04, то вам, скорее всего, тоже ничего больше не понадобится.&lt;/p&gt;

&lt;p&gt;Рекомендую сразу же добавить в VIM какую-нибудь популярную систему управления плагинами, т.к. на первых порах настривать многочисленные плагины придётся часто.
Мне нравится &lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Сначала клонируем репозиторий Vundle в папку с настройками VIM.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Затем создаём конфигурационный файл vim&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ touch ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;И добавляем в него следующие строки:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin &#39;VundleVim/Vundle.vim&#39;

call vundle#end() 
           
filetype plugin indent on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Выполняем&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;$ vim +PluginInstall +qall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Всё, Vundle установлен. Теперь каждый новый плагин нужно будет прописывать в файле настроек перед вызовом &lt;code&gt;vundle#end&lt;/code&gt;.
А после повторного выполнения &lt;code&gt;PluginInstall&lt;/code&gt; новые плагины из файла конфигурации будут установлены в систему.&lt;/p&gt;

&lt;h2 id=&#34;настраиваем-цвета-редактора:140cbd5ccce65f598015d386e32d8c4c&#34;&gt;Настраиваем цвета редактора&lt;/h2&gt;

&lt;p&gt;Для VIM уже создано бесчисленное множество цветовых схем.
Очень странно, если вам не удастся подобрать из всего предложенного многообразия что-то на свой вкус.&lt;/p&gt;

&lt;p&gt;Скачиваем какой-нибудь готовый набор цветовых схем. Например, отсюда:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/flazz/vim-colorschemes.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Копируем содержимое папки &lt;code&gt;colors&lt;/code&gt; из клонированного репозитория в папку &lt;code&gt;~/.vim/colors&lt;/code&gt;.
После этого, добавляем в файл &lt;code&gt;.vimrc&lt;/code&gt; строку&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;colorscheme codeschool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Всесто &lt;code&gt;codeschool&lt;/code&gt; можно вписать название любой понравившейся схемы.
Название темы соотвествует названию файла из папки &lt;code&gt;colors&lt;/code&gt;. Перезапускаем VIM - радуемся результату или идём на запись к окулисту.
Существует плагин, позволяющий изменять цветовую схему не перегружая VIM, но реального применения я ему так и не нашел.
Всё-таки настройка цветовой схемы - операция раховая. Настроил и забыл.&lt;/p&gt;

&lt;h2 id=&#34;устанавливаем-плагин-поддержки-golang:140cbd5ccce65f598015d386e32d8c4c&#34;&gt;Устанавливаем плагин поддержки golang&lt;/h2&gt;

&lt;p&gt;Собственно, всё, что нужно, установить плагин vim-go. В &lt;code&gt;.vimrc&lt;/code&gt; добавляем строку&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;Plugin &#39;fatih/vim-go&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Выполняем команду &lt;code&gt;:PluginInstall&lt;/code&gt;. Затем, &lt;code&gt;:GoInstallBinaries&lt;/code&gt;. Внимательно читаем результат выполнения этой команды.
Скорее всего, для корректной работы плагина придется доставить на компьютер часть стандартных инструментов Go.&lt;/p&gt;

&lt;p&gt;Со всеми функциями плагина знакомимся в &lt;a href=&#34;https://github.com/fatih/vim-go&#34;&gt;описании проекта&lt;/a&gt; на github&amp;rsquo;е.&lt;/p&gt;

&lt;h2 id=&#34;управляем-файлами-не-выходя-из-редактора:140cbd5ccce65f598015d386e32d8c4c&#34;&gt;Управляем файлами, не выходя из редактора&lt;/h2&gt;

&lt;p&gt;Для того, чтобы постоянно не переключаться в какой-либо файловый менеджер для открытия или создания файла,
устанавливаем плагин &lt;a href=&#34;https://github.com/scrooloose/nerdtree&#34;&gt;NERDTree&lt;/a&gt;. Этот плагин отображает в левой части окна VIM
дерево каталогов с возможностью удобной навигации, открытия, создания и удаления файлов.&lt;/p&gt;

&lt;p&gt;Выполняем уже привычную операцию. Добавляем в &lt;code&gt;.vimrc&lt;/code&gt; строку:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;Plugin &#39;scrooloose/nerdtree&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Добавим также открытие дерева каталогов в &amp;ldquo;автозапуск&amp;rdquo; VIM.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;autocmd vimenter * NERDTree &amp;quot; Открывать дерево каталогов при запуске VIM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Выполняем команду &lt;code&gt;PluginInstall&lt;/code&gt;. Чтобы ознакомиться с командами NERDTree достаточно в его окне нажать &lt;code&gt;?&lt;/code&gt;.
В открывшейся справке можно прочитать об основных функциях и горячих клавишах. Для закрытия справки нажимаем &lt;code&gt;?&lt;/code&gt; повторно.&lt;/p&gt;

&lt;p&gt;Особое внимание стоит обратить на команду &lt;code&gt;m&lt;/code&gt;. Из описания непонятно, что за меню будет вызвано. Но именно из этого меню
происходит добавление и удаление файлов и папок.&lt;/p&gt;

&lt;h2 id=&#34;небольшой-тюнинг-окна-редактирования:140cbd5ccce65f598015d386e32d8c4c&#34;&gt;Небольшой тюнинг окна редактирования&lt;/h2&gt;

&lt;p&gt;Всесто описания каждой опции приведу небольшой кусок конфигурационного файла с комментариями.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;set number &amp;quot; показывать номера строк в редакторе
set colorcolumn=120 &amp;quot; вертикальная линия после 120 символов
set tabstop=4 &amp;quot; ширина табуляции
set softtabstop=4 &amp;quot; ширина таба при использовании всесто него пробелов
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;автодополнение-кода:140cbd5ccce65f598015d386e32d8c4c&#34;&gt;Автодополнение кода&lt;/h2&gt;

&lt;p&gt;Тяжело представить современную IDE без функции автодополнения кода. Конечно, нам тоже хочется быть современными.
Устанавливаем плагин &lt;a href=&#34;https://github.com/Shougo/neocomplete.vim&#34;&gt;neocomplete.vim&lt;/a&gt; и сразу добавляем его в автозагрузку.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;Plugin &#39;Shougo/neocomplete&#39;
...
&amp;quot; neocomplete settings
let g:neocomplete#enable_at_startup = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Рекомендую внимательно прочитать на странице плагина требования к версии VIM. Есть вариант, что редактор придётся обновить.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://karamani.ru/img/vim-golang-img2_full.png&#34; alt=&#34;VIM-Golang scr.1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Настройки neocomplete - тема отдельной статьи. Пока что оставим всё по умолчанию. Единственное, сразу отключим
назойливое окошко в верхней части экрана. Его добавляет не neocomplete, а VIM. В настройках редактора есть &amp;ldquo;режим завершения&amp;rdquo;,
где указано сразу два режима - menu и preview. Menu оставляем, preview отключаем.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;set completeopt-=preview
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;горячие-клавиши:140cbd5ccce65f598015d386e32d8c4c&#34;&gt;Горячие клавиши&lt;/h2&gt;

&lt;p&gt;Есть смысл настроить дополнительные горячие клавиши для наиболее часто используемых операций,
типа сохранения файла, копирования, отмены действия и т.п.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;&amp;quot; CTRL-s - сохранить файл
noremap &amp;lt;silent&amp;gt; &amp;lt;C-S&amp;gt; :update&amp;lt;CR&amp;gt;
vnoremap &amp;lt;silent&amp;gt; &amp;lt;C-S&amp;gt; &amp;lt;C-C&amp;gt;:update&amp;lt;CR&amp;gt;
inoremap &amp;lt;silent&amp;gt; &amp;lt;C-S&amp;gt; &amp;lt;C-O&amp;gt;:update&amp;lt;CR&amp;gt;

&amp;quot; CTRL-F4 - закрыть окно
noremap &amp;lt;C-F4&amp;gt; &amp;lt;C-w&amp;gt;c
inoremap &amp;lt;C-F4&amp;gt; &amp;lt;C-o&amp;gt;&amp;lt;C-w&amp;gt;c
cnoremap &amp;lt;C-F4&amp;gt; &amp;lt;C-c&amp;gt;&amp;lt;C-w&amp;gt;
onoremap &amp;lt;C-F4&amp;gt; &amp;lt;C-c&amp;gt;&amp;lt;C-w&amp;gt;c

&amp;quot; SHIFT-Del - &amp;quot;вырезание&amp;quot; в системный буфер
vnoremap &amp;lt;S-Del&amp;gt; &amp;quot;+x
&amp;quot; CTRL-Insert - копирование в системный буфер
vnoremap &amp;lt;C-Insert&amp;gt; &amp;quot;+y
&amp;quot; SHIFT-Insert - вставка из системного буфера
map &amp;lt;S-Insert&amp;gt;  &amp;quot;+gP
cmap &amp;lt;S-Insert&amp;gt; &amp;lt;C-R&amp;gt;+

&amp;quot; CTRL-z - отмена действия
noremap &amp;lt;C-z&amp;gt; u
inoremap &amp;lt;C-z&amp;gt; &amp;lt;C-O&amp;gt;u
&amp;quot; CTRL-y - вернуть отменённое назад
noremap &amp;lt;C-y&amp;gt; &amp;lt;C-R&amp;gt;
inoremap &amp;lt;C-y&amp;gt; &amp;lt;C-O&amp;gt;&amp;lt;C-R&amp;gt;

&amp;quot; CTRL-d - дублирование текущей строки
imap &amp;lt;C-d&amp;gt; &amp;lt;esc&amp;gt;yypi
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;результат-сегодняшней-работы:140cbd5ccce65f598015d386e32d8c4c&#34;&gt;Результат сегодняшней работы&lt;/h2&gt;

&lt;p&gt;Тем, что мы собрали, уже можно пользоваться для программирования на go, но до совершенства, конечно, ещё очень далеко.
Хочется быстрой навигации по коду, закладок, отладчика, проверки синтаксиса и т.д. и т.п. А VIM хорош как раз тем,
что все эти желания осуществимы. К их осуществлению вернемся в следующих заметках. А после сегоднешней настройки у нас
получилось примерно следующее.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://karamani.ru/img/vim-golang-img1_full.png&#34;&gt;&lt;img src=&#34;http://karamani.ru/img/vim-golang-img1_small.png&#34; alt=&#34;VIM-Golang scr.2&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Подсветка синтаксиса в Hugo с помощью highlight.js</title>
      <link>http://karamani.ru/post/hugo-highlightjs/</link>
      <pubDate>Sun, 27 Dec 2015 01:28:39 +0300</pubDate>
      
      <guid>http://karamani.ru/post/hugo-highlightjs/</guid>
      <description>&lt;p&gt;Для блога, посвященного программированию, подсветка синтаксиса кода - вещь строго обязательная.
А учитывая, что готовых решений для этого предостаточно, не подключить что-то этакое себе на сайт всё равно, что плюнуть в карму.
Пойдем по самому простому пути - подключим на клиентской стороне популярную библиотеку &lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Как это принято в open source, инструкция по поключению highlight.js с сайта Hugo уже устарела.
На каждой странице hugo-сайта нам надо добавить в заголовки новую версию библиотеки, а совсем не то, что рекомендует авто Hugo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.0.0/styles/default.min.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.0.0/highlight.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Я использую тему &lt;a href=&#34;https://github.com/spf13/hyde&#34;&gt;hyde&lt;/a&gt;. Для неё нужно отредактировать файл &lt;code&gt;layouts/partials/head.html&lt;/code&gt;.
Если файла не существует, то его надо предварительно, до кастомизации, скопировать из темы &lt;code&gt;themes/hyde/layouts/partials/head.html&lt;/code&gt;.
Для других тем название файла заголовков может отличаться. Изучаем исходники.&lt;/p&gt;

&lt;p&gt;Вроде бы всё. Можем наслаждаться результатом. То, что помещено в блоки между тремя тильдами, будет стрательно раскрашено во все цвета радуги.&lt;/p&gt;

&lt;p&gt;Глаз радует, но, как всегда, остаётся пара вопросов.&lt;/p&gt;

&lt;p&gt;Во-первых, для темы hyde блоки кода отображаются с &amp;ldquo;двойным бордюром&amp;rdquo;, что разрушает гармонию.
Во-вторых, а что делать с блоками кода, для которых не нужно ничего подсвечивать?
Судьба которых быть скучными и унылыми.&lt;/p&gt;

&lt;p&gt;Для решения первой проблемы нужно переопределить стиль тега &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;, т.к. его цвет по-умолчанию отличается от цвета, используемого highlight.js.
Создаём файл стилей &lt;code&gt;static/css/custom.css&lt;/code&gt;, прописываем его в head.html &lt;em&gt;после&lt;/em&gt; подключения highlight.js, добавляем стиль.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;pre {
	background-color: #f0f0f0;	
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;От лишнего &amp;ldquo;бордюра&amp;rdquo; избавились. Теперь он окрашен в тот же цвет, что и блок &lt;code&gt;code&lt;/code&gt; внутри.&lt;/p&gt;

&lt;p&gt;Для отключения подсветки добавляем к тильдам ключевое слово &lt;code&gt;nohighlight&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~~~nohighlight
// блок, синтаксис которого не будем подсвечивать
~~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Аналогично с отключением синтаксиса можно указать конкретный язык для подсветки, т.к. highlight.js далеко не всегда корректно определяет используемый язык.
Например:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~~~php
// здесь блок php-кода
~~~
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hugo - генератор статических сайтов</title>
      <link>http://karamani.ru/post/hugo-static-site-builder/</link>
      <pubDate>Fri, 25 Dec 2015 23:28:39 +0300</pubDate>
      
      <guid>http://karamani.ru/post/hugo-static-site-builder/</guid>
      <description>&lt;p&gt;Динамические сайты позволяют очень много. Часто слишком много. Иногда слишком много ненужного и неиспользуемого.
И за все неиспользуемые функции надо платить увеличением времени отклика, машинным временем, лишним электричеством,
перегревом процессоров и, как следствие, глобальным потеплением. Позаботьтесь о природе - не используйте
динамические сайты без необходимости.
ы&lt;/p&gt;

&lt;p&gt;Лозунги озвучены. Они прекрасны, но не писать же вручную ради спасения лишнего дерева сотни html-ок. Конечно, нет.
Для генерации html уже придумано множество инструментов. Берем готовое и используем.&lt;/p&gt;

&lt;p&gt;Один из самых популярных в последнее время инструментов - &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Принцип его работы очень прост. Создается некий шаблон сайта со своим дизайном, сеткой, стилями, js.
Наполнение сайта пишется в любом текстовом редакторе в &lt;a href=&#34;https://ru.wikipedia.org/wiki/Markdown&#34;&gt;markdown-формате&lt;/a&gt;.
Затем запускается Hugo, который собирает из шаблона и текстовых статей готовые html-ки и сохраняет их в подпапке &lt;code&gt;public&lt;/code&gt;.
После чего, остается только залить получившийся статический сайт на сервер.&lt;/p&gt;

&lt;p&gt;В качестве бонуса Hugo умеет локально запускать web-сервер с черновой версией сайта.
Достаточно в папке проекта сайта набрать:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь, набрав в браузере &lt;code&gt;http://localhost:1313&lt;/code&gt;, можно видеть внесенные локально изменения. Флажок &lt;code&gt;-w&lt;/code&gt; указывает на то, что при изменении каких-либо файлов,
сайт будет автоматически перегенерирован и перегружен в браузере.&lt;/p&gt;

&lt;p&gt;Переписывать справку нет большого смысла, но хочется остановиться на нескольких моментах, которые меня при первом знакомстве
c Hugo поставили в тупик.&lt;/p&gt;

&lt;p&gt;Во-первых, у текущей версии Hugo нет шаблона по умолчанию. Т.е. чтобы генерация сайта заработала нужно &lt;em&gt;обязательно&lt;/em&gt; скачать какой-либо готовый шаблон
и прописать его в файле конфигурации. Мне понравилась тема Hyde. Скачиваем её.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir themes
git clone https://github.com/spf13/hyde themes/hyde
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В файле config.yaml прописываем:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theme: &amp;quot;hyde&amp;quot;

params:
  themeColor: &amp;quot;theme-base-08&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Во-вторых, список параметров в файле конфигурации &lt;em&gt;сильно&lt;/em&gt; зависит от используемого шаблона. Есть реальные шансы, что
задав в конфигурации список пунктов меню, для каких-то шаблонов мы ничего не увидим. Просто потому, что данные шаблоны
вообще не предусматривают отображение меню. Читаем внимательно справку не только по самому Hugo, но и по каждому
используемому шаблону. Там может найтись много интересного.&lt;/p&gt;

&lt;p&gt;В-третьих, сервер Hugo по умолчанию генерирует сайт в памяти. Учитывая перегенерацию сайта &amp;ldquo;на лету&amp;rdquo;, это очень полезная
функция. Беда в том, что в текущей версии она работает не везде и не всегда. &amp;ldquo;Чинится&amp;rdquo; принудительным отключением при запуске сервера.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server --renderToDisk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В целом, уже сейчас Hugo - удобный и функциональный инструмент для создания статических сайтов. А учитывая, что он активно
развивается не только силами автора, но и уже достаточно многочисленным сообществом, можно прогнозировать ему достаточно
счастливое будущее. А мы всё-таки спасем с его помощью несколько деревьев.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ссылки внутри цикла foreach в Php</title>
      <link>http://karamani.ru/post/php-foreach/</link>
      <pubDate>Tue, 15 Dec 2015 01:44:21 +0300</pubDate>
      
      <guid>http://karamani.ru/post/php-foreach/</guid>
      <description>&lt;p&gt;Тот случай, когда php работает согласно спецификации, но вопреки здравому смыслу.&lt;/p&gt;

&lt;p&gt;Ниже приведён пример отлично работающего кода:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$list = array(1, 2, 3);
foreach ($list as &amp;amp;$item) {
    $item++;
}
print_r($list);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Запускаем, получаем логичный вывод:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Array
(
    [0] =&amp;gt; 2
    [1] =&amp;gt; 3
    [2] =&amp;gt; 4
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;А теперь лёгким движением руки этот код превращается&amp;hellip; превращается&amp;hellip; в конструкцию со странным неочевидным функционалом.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$list = array(1, 2, 3);
foreach ($list as &amp;amp;$item) {
    $item++;
}
print_r($list);

foreach ($list as $item) {
    ;
}
print_r($list);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Мы всего лишь организовали второй цикл foreach по одному и тому массиву. И в этот раз &lt;code&gt;print_r&lt;/code&gt; выдал совсем иные результаты.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Array
(
    [0] =&amp;gt; 2
    [1] =&amp;gt; 3
    [2] =&amp;gt; 3
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Что же произошло? Собственно, ничего такого, чтобы мы сами не просили сделать PHP. В первом цикле мы объявили ссылку &amp;amp;$item, которая после завершения работы цикла указывает на элемент массива $list[2]. Далее мы пробегаемся ещё раз по массиву, на каждом шаге присваивая переменной $item очередное значение. Т.к. в PHP область видимости переменных не ограничивается блоком составного оператора, то переменная $item во втором цикле - это та же самая переменная из первого цикла. Поэтому, одновременно с установкой значения переменной $item, это же значение присваивается и элементу $list[2].&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Шаг 0: $item = $list[2] = $list[0] = 2&lt;/li&gt;
&lt;li&gt;Шаг 1: $item = $list[2] = $list[1] = 3&lt;/li&gt;
&lt;li&gt;Шаг 2: $item = $list[2] = $list[2] = 3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Никаких ошибок нет, но получить-то мы хотели несколько другой результат. Есть несколько вариантов, чтобы обезопасить себя от таких неожиданностей. Первый вариант - никогда не забываем принудительно чистить переменные. Вот этот код всегда работает так, как задумано.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$list = array(1, 2, 3);
foreach ($list as &amp;amp;$item) {
    $item++;
}
print_r($list);

unset($item); // !!!

foreach ($list as $item) {
    ;
}
print_r($list);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Второй вариант - для изменения элементов массива не используем ссылки, используем конструкцию $key =&amp;gt; $value. С ней также нет никаких проблем.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$list = array(1, 2, 3);
foreach ($list as $key =&amp;gt; $item) {
    $list[$key]++;
}
print_r($list);

foreach ($list as $key =&amp;gt; $item) {
    ;
}
print_r($list);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ну и самый правильный вариант, при котором мы не только избегаем описанной проблемы, но и многих других - максимально сокращаем область видимости переменных, выделяя логические части кода в отдельные функции. Этот вариант неплохо бы совмещать с одним из первых двух.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$list = array(1, 2, 3);

$incrementList = function ($list) {
    foreach ($list as $key =&amp;gt; $item) {
        $list[$key]++;
    }
    return $list;
};
$list = $incrementList($list);
print_r($list);

$doList = function ($list) {
    foreach ($list as $key =&amp;gt; $item) {
        ;
    }
    return $list;
};
$list = $doList($list);
print_r($list);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Здесь $item первого цикла и $item второго цикла - разные переменные.&lt;/p&gt;

&lt;p&gt;Пишите на  PHP и прибудет с вами сила!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Curl, многомерные массивы и передача файлов</title>
      <link>http://karamani.ru/post/php-curl-files/</link>
      <pubDate>Mon, 14 Dec 2015 02:04:16 +0300</pubDate>
      
      <guid>http://karamani.ru/post/php-curl-files/</guid>
      <description>&lt;p&gt;Задача: из кода на PHP передать веб-службе файл с помощью curl.&lt;/p&gt;

&lt;p&gt;Решение стандартное и достаточно простое, но, как обычно, при программировании на PHP есть нюансы.&lt;/p&gt;

&lt;p&gt;Инициализируем библиотеку curl, формируем данные для POST-запроса, одним из параметров устанавливаем путь к передаваемому файлу, который обязательно начинаем со значка &amp;ldquo;собаки&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$requestVars = array(
    &#39;id&#39; =&amp;gt; 1234,
    &#39;name&#39; =&amp;gt; &#39;log&#39;,
    &#39;logfile&#39; =&amp;gt; &#39;@/tmp/test.log&#39;);

$ch = curl_init(); 

curl_setopt($ch, CURLOPT_URL, &#39;test.web.service.net&#39;);
curl_setopt($ch, CURLOPT_POST, 1);

curl_setopt($ch, CURLOPT_POSTFIELDS, $requestVars);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);

$res = curl_exec($ch);

curl_close($ch);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Смотрим на стороне веб-службы переменные $_POST и $_FILES.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$_POST: Array (
    [id] =&amp;gt; 1234
    [name] =&amp;gt; log
)

$_FILES: Array (
    [logfile] =&amp;gt; Array (
        [name] =&amp;gt; test.log
        [type] =&amp;gt; application/octet-stream
        [tmp_name] =&amp;gt; /tmp/phpfdWZF6
        [error] =&amp;gt; 0
        [size] =&amp;gt; 11
    )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Всё прошло отлично. Curl самостоятельно принял решение об использовании при передаче запроса алгоритма multipart/form-data и передал файл веб-службе.
На её стороне файл сохранён с именем /tmp/phpfdWZF6.&lt;/p&gt;

&lt;p&gt;Теперь попробуем изменить параметры запроса, добавив туда вложенные массивы.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$requestVars = array(
    &#39;id&#39; =&amp;gt; array(1, 2, 3, 4),
    &#39;name&#39; =&amp;gt; &#39;log&#39;,
    &#39;logfile&#39; =&amp;gt; &#39;@/tmp/test.log&#39;); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Файл веб-служба загрузила, а вот в переменной $_POST теперь некорректные данные.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$_POST: Array (
    [id] =&amp;gt; Array
    [name] =&amp;gt; log
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Проблема в том, что библиотека curl не умеет обрабатывать вложенные массивы, установленные в CURLOPT_POSTFIELDS.
Она работает только с одноуровневыми массивами или строкам. Поэтому самое первое и очевидное решение - превратить массив в строку с помощью http_build_query.
Пробуем.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($requestVars, &#39;&#39;, &#39;&amp;amp;&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Параметры в $_POST передались как нужно, но теперь вообще не передался файл.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$_POST: Array (
    [id] =&amp;gt; Array (
        [0] =&amp;gt; 1
        [1] =&amp;gt; 2
        [2] =&amp;gt; 3
        [3] =&amp;gt; 4
    )
    [name] =&amp;gt; log
    [logfile] =&amp;gt; @/tmp/test.log
)

$_FILES: Array ( )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Т.к. параметры запроса были переданы строкой, то библиотека curl проявила интеллект и начала использовать алгоритм передачи данных application/x-www-form-urlencoded,
который не имеет даже теоретической возможности передачи файла. Продолжаем борьбу. Устанавливаем принудительно в заголовках запроса нужный нам тип контента.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$headers[] = &amp;quot;Content-type: multipart/form-data&amp;quot;;
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;После этого у нас вообще перестаёт работать отправка запроса. Ни параметры запроса, ни файл веб-служба не получает.
А всё потому, что начиная с PHP версии 5.2.0 при передаче файлов с префиксом &amp;ldquo;@&amp;rdquo; значение в CURLOPT_POSTFIELDS обязательно должно быть массивом.
С одной стороны, чтобы передать многоуровневый массив, нам нужна строка. С другой стороны, для передачи файла нужен массив.&lt;/p&gt;

&lt;p&gt;Решение, как обычно, посередине. Строим одноуровневый массив с такими ключами, какими они были бы при формировании строки.
Т.е. приводим наши параметры к такому виду.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$requestVars = array(
    &#39;id[0]&#39; =&amp;gt; 1, 
    &#39;id[1]&#39; =&amp;gt; 2, 
    &#39;id[3]&#39; =&amp;gt; 3, 
    &#39;id[4]&#39; =&amp;gt; 4,
    &#39;name&#39; =&amp;gt; &#39;log&#39;,
    &#39;logfile&#39; =&amp;gt; &#39;@/tmp/test.log&#39;); 

curl_setopt($ch, CURLOPT_POSTFIELDS, $requestVars);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;И вот теперь мы, наконец-то, получили то, что хотели.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$_POST: Array (
    [id] =&amp;gt; Array (
        [0] =&amp;gt; 1
        [1] =&amp;gt; 2
        [3] =&amp;gt; 3
        [4] =&amp;gt; 4
    )
    [name] =&amp;gt; log
)

$_FILES: Array (
    [logfile] =&amp;gt; Array (
        [name] =&amp;gt; test.log
        [type] =&amp;gt; application/octet-stream
        [tmp_name] =&amp;gt; /tmp/phpfdWZF6
        [error] =&amp;gt; 0
        [size] =&amp;gt; 11
    )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Осталось написать универсальное решение, которое бы преобразовывало любые многоуровневые массивы в одноуровневые.
Тут на помощь приходит простенькая рекурсия.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function convertToStringArray(
        $inputKey, $inputArray, &amp;amp;$resultArray) {

    foreach ($inputArray as $key =&amp;gt; $value) {
        $tmpKey = (bool)$inputKey ? $inputKey.&amp;quot;[$key]&amp;quot; : $key;
        if (is_array($value)) {
            convertToStringArray($tmpKey, $value, $resultArray);
        } else {
            $resultArray[$tmpKey] = $value;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Тестируем последний раз.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$requestVars = array(
    &#39;id&#39; =&amp;gt; array(1, 2, 3, 4),
    &#39;name&#39; =&amp;gt; &#39;log&#39;,
    &#39;logfile&#39; =&amp;gt; &#39;@/tmp/test.log&#39;);

$resultArray = array();
convertToStringArray(&#39;&#39;, $requestVars, $resultArray);
$requestVars = $resultArray;

$ch = curl_init(); 

curl_setopt($ch, CURLOPT_URL, &#39;test.web.service.net&#39;);
curl_setopt($ch, CURLOPT_POST, 1);

curl_setopt($ch, CURLOPT_POSTFIELDS, $requestVars);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);

$res = curl_exec($ch);

curl_close($ch);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Убеждаемся, что всё работает, и отправляемся на поиски новых открытий в прекрасном и удивительном мире программирования на PHP.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>http://karamani.ru/post/welcome/</link>
      <pubDate>Sat, 12 Dec 2015 20:29:33 +0400</pubDate>
      
      <guid>http://karamani.ru/post/welcome/</guid>
      <description>&lt;p&gt;Надцатая реинкарнация блога производится по нескольким причинам, но основная одна - я набрался опыта в разных новых штуках,
и, как следствие, у меня опять есть о чем писать. Попутно бложик переезжает с попсового Blogger&amp;rsquo;а на брутальный standalone.&lt;/p&gt;

&lt;p&gt;Нынешний перечень интересов:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Архитектура высоконагруженных проектов (highload и иже с ним)&lt;/li&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;li&gt;Big Data&lt;/li&gt;
&lt;li&gt;Docker-контейнеры и кластера&lt;/li&gt;
&lt;li&gt;Управление процессом разработки ПО&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Плюс никуда не девается большой рабочий опыт с Php и MySql.&lt;/p&gt;

&lt;p&gt;Этим темам постараюсь сейчас уделять основное внимание, но, со временем, список интересов, конечно, может измениться.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://karamani.ru/about/</link>
      <pubDate>Tue, 01 Dec 2015 22:04:11 +0400</pubDate>
      
      <guid>http://karamani.ru/about/</guid>
      <description>&lt;p&gt;О сайте.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>